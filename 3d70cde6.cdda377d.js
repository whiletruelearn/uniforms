(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{183:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return r})),n.d(t,"default",(function(){return m}));n(66),n(224),n(33),n(27),n(26),n(67),n(0);var a=n(232);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={id:"faq",title:"FAQ"},r=[{value:"How can I customize/style my form fields?",id:"how-can-i-customizestyle-my-form-fields",children:[]},{value:"How can I create custom fields?",id:"how-can-i-create-custom-fields",children:[]},{value:"How can I use a custom field in my form?",id:"how-can-i-use-a-custom-field-in-my-form",children:[]},{value:"How can I pass additional props to the custom field?",id:"how-can-i-pass-additional-props-to-the-custom-field",children:[]},{value:"How can I have a dynamic label? (eg. handling i18n)",id:"how-can-i-have-a-dynamic-label-eg-handling-i18n",children:[]},{value:"How can I change the way my form validates?",id:"how-can-i-change-the-way-my-form-validates",children:[]},{value:"How can I reset my form state?",id:"how-can-i-reset-my-form-state",children:[]},{value:"I want my form to be prefilled with data. How can I do that?",id:"i-want-my-form-to-be-prefilled-with-data-how-can-i-do-that",children:[]},{value:"How can I transform my model?",id:"how-can-i-transform-my-model",children:[]},{value:"How can I make my form autofocused?",id:"how-can-i-make-my-form-autofocused",children:[]},{value:"How can I know a current form state?",id:"how-can-i-know-a-current-form-state",children:[]},{value:"I want to disable a submit button until there is a difference between the current form state and my model. How can I do it?",id:"i-want-to-disable-a-submit-button-until-there-is-a-difference-between-the-current-form-state-and-my-model-how-can-i-do-it",children:[]}],c={rightToc:r},l="wrapper";function m(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(l,o({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"how-can-i-customizestyle-my-form-fields"},"How can I customize/style my form fields?"),Object(a.b)("p",null,"You can style your form fields simply by passing a ",Object(a.b)("inlineCode",{parentName:"p"},"className")," property."),Object(a.b)("h3",{id:"how-can-i-create-custom-fields"},"How can I create custom fields?"),Object(a.b)("p",null,"You can create a custom field by wrapping your component inside the ",Object(a.b)("a",o({parentName:"p"},{href:"/docs/api-helpers#connectfieldcomponent-options"}),Object(a.b)("inlineCode",{parentName:"a"},"connectField")),"."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"connectField")," will pass various props related to the form management, such as ",Object(a.b)("inlineCode",{parentName:"p"},"onChange()")," function, current field's value, errors and so on, to your component."),Object(a.b)("p",null,"Please visit the ",Object(a.b)("a",o({parentName:"p"},{href:"/docs/tutorials-creating-custom-field"}),"Tutorials > Creating a custom field")," tutorial to see how to create your own fields."),Object(a.b)("h3",{id:"how-can-i-use-a-custom-field-in-my-form"},"How can I use a custom field in my form?"),Object(a.b)("p",null,"You can tell your schema to use your custom field by adding the ",Object(a.b)("inlineCode",{parentName:"p"},"uniforms")," property."),Object(a.b)("p",null,"Example in JSONSchema:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const schema = {\n  /*...*/\n  firstName: {\n    type: 'string',\n    uniforms: MyCustomFirstNameField\n  }\n  /*...*/\n};\n")),Object(a.b)("p",null,"We say that the component used for the ",Object(a.b)("inlineCode",{parentName:"p"},"firstName")," property will be the ",Object(a.b)("inlineCode",{parentName:"p"},"MyCustomFirstNameField"),"."),Object(a.b)("p",null,"You can also leave the schema untouched and pass your custom field directly to the ",Object(a.b)("inlineCode",{parentName:"p"},"AutoField")," in a ",Object(a.b)("inlineCode",{parentName:"p"},"component")," property instead:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),'<AutoForm schema={schema} onSubmit={onSubmit}>\n  /*...*/\n  <AutoField component={MyCustomFirstNameField} name="firstName" />\n  /*...*/\n</AutoForm>\n')),Object(a.b)("h3",{id:"how-can-i-pass-additional-props-to-the-custom-field"},"How can I pass additional props to the custom field?"),Object(a.b)("p",null,"You can pass any additional props to your custom field, by converting the ",Object(a.b)("inlineCode",{parentName:"p"},"uniforms")," property to the type of object, with the ",Object(a.b)("inlineCode",{parentName:"p"},"component")," key. Any other keys will be treated as props."),Object(a.b)("p",null,"Eg. in JSONSchema:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const schema = {\n  /*...*/\n  firstName: {\n    type: 'string',\n    uniforms: {\n      component: MyCustomFirstNameField,\n      propA: 1,\n      propB: 2\n    }\n  }\n  /*...*/\n};\n")),Object(a.b)("p",null,"We say that the component used for the ",Object(a.b)("inlineCode",{parentName:"p"},"firstName")," property will be the ",Object(a.b)("inlineCode",{parentName:"p"},"MyCustomFirstNameField")," and it will receive 2 additonal props: ",Object(a.b)("inlineCode",{parentName:"p"},"propA")," and ",Object(a.b)("inlineCode",{parentName:"p"},"propB"),"."),Object(a.b)("p",null,"You can also leave the schema untouched and pass your custom field with props directly to the ",Object(a.b)("inlineCode",{parentName:"p"},"AutoField")," instead:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),'<AutoForm schema={schema} onSubmit={onSubmit}>\n  /*...*/\n  <AutoField\n    component={MyCustomFirstNameField}\n    name="firstName"\n    propA={1}\n    propB={2}\n  />\n  /*...*/\n</AutoForm>\n')),Object(a.b)("h3",{id:"how-can-i-have-a-dynamic-label-eg-handling-i18n"},"How can I have a dynamic label? (eg. handling i18n)"),Object(a.b)("p",null,"There are few ways to handle that, depending on the level of abstraction you want to do it - schema, field or ",Object(a.b)("inlineCode",{parentName:"p"},"AutoField")," component."),Object(a.b)("p",null,"On the ",Object(a.b)("strong",{parentName:"p"},"schema")," level, you can use ",Object(a.b)("inlineCode",{parentName:"p"},"uniforms: {...}")," object property to pass extra props to the field.\nA function returning it (",Object(a.b)("inlineCode",{parentName:"p"},"uniforms: () => ({...})"),") is also accepted. With it, dynamic labels can be fetched from any source."),Object(a.b)("p",null,"On the ",Object(a.b)("strong",{parentName:"p"},"field")," level, you can prepare your own component set, where you will use ",Object(a.b)("inlineCode",{parentName:"p"},"<Translate>{label}</Translate>")," instead of ",Object(a.b)("inlineCode",{parentName:"p"},"{label}"),"."),Object(a.b)("p",null,"While the first one is schema-dependent and the second is theme-dependent, there's an additional option, somewhere in between. You can create a custom ",Object(a.b)("inlineCode",{parentName:"p"},"AutoField")," component, based on a builtin one, where you provide some additional props and label might be one of them (based on other props, like name or some schema field)."),Object(a.b)("h3",{id:"how-can-i-change-the-way-my-form-validates"},"How can I change the way my form validates?"),Object(a.b)("p",null,"Any form can be validated in one of those three styles:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"onChange"),"\nValidate on every change.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"onChangeAfterSubmit")," ",Object(a.b)("em",{parentName:"p"},"(default)"),"\nValidate on every change, but only after first submit.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"onSubmit"),"\nValidate on every submit."))),Object(a.b)("p",null,"You change the way your form validates by setting ",Object(a.b)("inlineCode",{parentName:"p"},"validate")," prop:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),'<AutoForm validate="onChange" schema={schema} onSubmit={onSubmit} />\n')),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," If your schema validator accepts any options, those can be passed in ",Object(a.b)("inlineCode",{parentName:"p"},"validator")," prop:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"<AutoForm validator={validatorOptions} />\n")),Object(a.b)("h3",{id:"how-can-i-reset-my-form-state"},"How can I reset my form state?"),Object(a.b)("p",null,"You can use ",Object(a.b)("a",o({parentName:"p"},{href:"https://facebook.github.io/react/docs/more-about-refs.html"}),"React ",Object(a.b)("inlineCode",{parentName:"a"},"ref")," prop")," to manually access form methods."),Object(a.b)("p",null,"These methods are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"change(key, value)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"reset()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"submit()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"validate()")," ",Object(a.b)("em",{parentName:"li"},"(added in ",Object(a.b)("inlineCode",{parentName:"em"},"ValidatedForm"),")"))),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const MyForm = ({ schema, onSubmit }) => {\n  let formRef;\n\n  return (\n    <section>\n      <AutoForm\n        ref={ref => (formRef = ref)}\n        schema={schema}\n        onSubmit={onSubmit}\n      />\n      <small onClick={() => formRef.reset()}>Reset</small>\n      <small onClick={() => formRef.submit()}>Submit</small>\n    </section>\n  );\n};\n")),Object(a.b)("p",null,"You can find more about form methods ",Object(a.b)("a",o({parentName:"p"},{href:"/docs/api-forms"}),"here"),"."),Object(a.b)("h3",{id:"i-want-my-form-to-be-prefilled-with-data-how-can-i-do-that"},"I want my form to be prefilled with data. How can I do that?"),Object(a.b)("p",null,"You can pass the initial data to the form by using the ",Object(a.b)("inlineCode",{parentName:"p"},"model")," prop."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"model")," is an object with ",Object(a.b)("inlineCode",{parentName:"p"},"{field: value}")," structure. It doesn't matter if it has a prototype or not, but keep in mind that in ",Object(a.b)("inlineCode",{parentName:"p"},"onSubmit")," or in ",Object(a.b)("inlineCode",{parentName:"p"},"onChangeModel")," you'll receive a plain object. If you treat form as an input, then this is a value."),Object(a.b)("h3",{id:"how-can-i-transform-my-model"},"How can I transform my model?"),Object(a.b)("p",null,"You should ",Object(a.b)("inlineCode",{parentName:"p"},"modelTransform"),". It is a function transforming one model into another. It's used in a few situations (called 'modes') described below."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Remember not to mutate a given model!")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"function transform(mode, model) {\n  // This model will be passed to the fields.\n  if (mode === 'form') {\n    /* ... */\n  }\n\n  // This model will be submitted.\n  if (mode === 'submit') {\n    /* ... */\n  }\n\n  // This model will be validated.\n  if (mode === 'validate') {\n    /* ... */\n  }\n\n  // Otherwise, return unaltered model.\n  return model;\n}\n\n<AutoForm modelTransform={transform} schema={schema} onSubmit={onSubmit} />;\n")),Object(a.b)("h3",{id:"how-can-i-make-my-form-autofocused"},"How can I make my form autofocused?"),Object(a.b)("p",null,"You can take a reference to the field and manually trigger ",Object(a.b)("inlineCode",{parentName:"p"},".focus()"),":"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),'<AutoField name="firstName" inputRef={field => field.focus()} />\n')),Object(a.b)("h3",{id:"how-can-i-know-a-current-form-state"},"How can I know a current form state?"),Object(a.b)("p",null,"A current form state is stored inside ",Object(a.b)("inlineCode",{parentName:"p"},"uniforms")," in ",Object(a.b)("a",o({parentName:"p"},{href:"https://reactjs.org/docs/legacy-context.html"}),"React context"),", emitted by a ",Object(a.b)("inlineCode",{parentName:"p"},"BaseField"),"."),Object(a.b)("p",null,"A convenient way to access it is to write a helper function, eg. ",Object(a.b)("inlineCode",{parentName:"p"},"WithUniforms"),", that receives a context and passes it to the children:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"import { BaseField } from 'uniforms';\n\nconst WithUniforms = ({ children }, { uniforms }) => children(uniforms);\n\nWithUniforms.contextTypes = BaseField.contextTypes;\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"uniforms")," context data consists of various properties which can be found in ",Object(a.b)("a",o({parentName:"p"},{href:"/docs/api-context-data"}),"here"),"."),Object(a.b)("h5",{id:"example-usage"},"Example usage:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"<AutoForm>\n  <WithUniforms>\n    {uniforms => (\n      // Now I have access to the context!\n      <MyField uniformsContext={uniforms} />\n    )}\n  </WithUniforms>\n</AutoForm>\n")),Object(a.b)("p",null,"You can find out more about React context ",Object(a.b)("a",o({parentName:"p"},{href:"https://reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components"}),"here"),"."),Object(a.b)("h3",{id:"i-want-to-disable-a-submit-button-until-there-is-a-difference-between-the-current-form-state-and-my-model-how-can-i-do-it"},"I want to disable a submit button until there is a difference between the current form state and my model. How can I do it?"),Object(a.b)("p",null,"Basically, you have to find out whether there is a difference between a current form state and your model, eg. by calling lodash's ",Object(a.b)("inlineCode",{parentName:"p"},"isEqual")," function.\nCurrent form state can be accessed through the context (see ",Object(a.b)("a",o({parentName:"p"},{href:"/docs/faq#how-can-i-know-a-current-form-state"}),"How can I know a current form state?"),") and form model can be passed as an ordinary prop:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const ChangedForm = ({ model }) => (\n  <AutoForm model={model}>\n    <WithUniforms>\n      {uniforms => <SubmitField disabled={isEqual(uniforms.model, model)} />}\n    </WithUniforms>\n  </AutoForm>\n);\n")))}m.isMDXComponent=!0},224:function(e,t,n){"use strict";var a=n(3),o=n(69)(!1),i=[].indexOf,r=!!i&&1/[1].indexOf(1,-0)<0;a(a.P+a.F*(r||!n(34)(i)),"Array",{indexOf:function(e){return r?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},232:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return b}));var a=n(0),o=n.n(a),i=o.a.createContext({}),r=function(e){var t=o.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},c=function(e){var t=r(e.components);return o.a.createElement(i.Provider,{value:t},e.children)};var l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),s=r(n),b=a,d=s[c+"."+b]||s[b]||m[b]||i;return n?o.a.createElement(d,Object.assign({},{ref:t},l,{components:n})):o.a.createElement(d,Object.assign({},{ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=s;var c={};for(var m in t)hasOwnProperty.call(t,m)&&(c[m]=t[m]);c.originalType=e,c[l]="string"==typeof e?e:a,r[1]=c;for(var b=2;b<i;b++)r[b]=n[b];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);