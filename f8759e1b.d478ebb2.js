(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{174:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));n(66),n(224),n(33),n(27),n(26),n(67),n(0);var a=n(232);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={id:"api-helpers",title:"Helpers"},b=[{value:"connectField(component[, options])",id:"connectfieldcomponent-options",children:[]},{value:"changedKeys(root, valueA, valueB)",id:"changedkeysroot-valuea-valueb",children:[]},{value:"createSchemaBridge(schemaOrBridge)",id:"createschemabridgeschemaorbridge",children:[]},{value:"createSchemaBridge.register(bridge)",id:"createschemabridgeregisterbridge",children:[]},{value:"filterDOMProps(props)",id:"filterdompropsprops",children:[]},{value:"filterDOMProps.register(propA, propB, propC ...)",id:"filterdompropsregisterpropa-propb-propc-",children:[]},{value:"filterDOMProps.registered",id:"filterdompropsregistered",children:[]},{value:"injectName(name, component)",id:"injectnamename-component",children:[]},{value:"joinName([null, ] nameA, nameB, nameC, ...)",id:"joinnamenull--namea-nameb-namec-",children:[]},{value:"nothing",id:"nothing",children:[]},{value:"randomIds([prefix])",id:"randomidsprefix",children:[]}],c={rightToc:b},o="wrapper";function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(o,r({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"connectfieldcomponent-options"},Object(a.b)("inlineCode",{parentName:"h2"},"connectField(component[, options])")),Object(a.b)("p",null,"Provides form management related props."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"connectField")," helper is a component wrapper, that provides various props related to the form management.\nIt also adds the 'Field' suffix to the name of the wrapped component."),Object(a.b)("p",null,"The table below lists all of the ",Object(a.b)("strong",{parentName:"p"},"guaranteed")," props that will be passed to the wrapped component:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Type"),Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"changed")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Has field changed?")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"disabled")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Is field disabled?")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"error")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"object")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field scoped part of validation error.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"errorMessage")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"string")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field scoped validation error message.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"field")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"object")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field definition from schema.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"fields")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"arrayOf(string)")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Subfields names.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"fieldType")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"func")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field type.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"findError")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"func(name)")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Request another field error.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"findField")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"func(name)")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Request another field field.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"findValue")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"func(name)")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Request another field value.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"id")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"string")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field id - given or random.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"label")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"string")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field label.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"name")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"string")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field name.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"onChange")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"func(value, [name])")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Change field value.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"parent")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"object")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Parent field props.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"placeholder")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"string")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field placeholder.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"value")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"any")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field value.")))),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"connectField")," function accepts two arguments: the first one is a component and the second one is an options object."),Object(a.b)("p",null,"The table below lists all available options:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Type"),Object(a.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"mapProps")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"func(props)")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Props mapper. Useful for integration with third-party components. For example, you can rename specific props instead of doing mapping by hand in the component.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"baseField")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"element")," (React compponent)"),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Base field class. It's reserved for the future - right now there's no useful usecase.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"ensureValue")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"<input>")," helper. In React, ",Object(a.b)("inlineCode",{parentName:"td"},"<input>")," can't have undefined or null value and any onChange at once - this option passes 'undefined' as en empty string.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"initialValue")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Initial value check. If truthy, then after the first render defaultValue is set as value if no value is provided (undefined).")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"includeParent")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Additional parent prop. If truthy, additional parent prop is provided (if any). Useful for nested or complex fields.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"includeInChain")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),Object(a.b)("inlineCode",{parentName:"td"},"bool")),Object(a.b)("td",r({parentName:"tr"},{align:"center"}),"Field name chain visibility. If truthy, then every nested field name will be prefixed with parent name.")))),Object(a.b)("h2",{id:"changedkeysroot-valuea-valueb"},Object(a.b)("inlineCode",{parentName:"h2"},"changedKeys(root, valueA, valueB)")),Object(a.b)("p",null,"Returns an array of changed keys between ",Object(a.b)("inlineCode",{parentName:"p"},"valueA")," and ",Object(a.b)("inlineCode",{parentName:"p"},"valueB"),", where ",Object(a.b)("inlineCode",{parentName:"p"},"root")," is the root key."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { changedKeys } from 'uniforms';\n\nconst arrayOfChangedKeys = changedKeys(root, valueA, valueB);\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," For more examples, see ",Object(a.b)("inlineCode",{parentName:"p"},"changedKeys")," ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/__tests__/changedKeys.js"}),"tests"),"."),Object(a.b)("h2",{id:"createschemabridgeschemaorbridge"},Object(a.b)("inlineCode",{parentName:"h2"},"createSchemaBridge(schemaOrBridge)")),Object(a.b)("p",null,"Retuns a bridge. (",Object(a.b)("em",{parentName:"p"},"It's rather an internal helper, but it's still exported."),")"),Object(a.b)("p",null,"Use it, if you want to manually create a schema bridge or to test your bridge.\nIt will throw on an unrecognised schema."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { createSchemaBridge } from 'uniforms';\n\nconst bridge = createSchemaBridge(schemaOrBridge);\n")),Object(a.b)("h2",{id:"createschemabridgeregisterbridge"},Object(a.b)("inlineCode",{parentName:"h2"},"createSchemaBridge.register(bridge)")),Object(a.b)("p",null,"Registers a custom bridge."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { createSchemaBridge } from 'uniforms';\n\ncreateSchemaBridge.register(propA, propB, propC /* ... */);\n")),Object(a.b)("h2",{id:"filterdompropsprops"},Object(a.b)("inlineCode",{parentName:"h2"},"filterDOMProps(props)")),Object(a.b)("p",null,"Removes all uniforms-related props."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { filterDOMProps } from 'uniforms';\n\nconst nonUniformsProps = filterDOMProps(props);\n")),Object(a.b)("h2",{id:"filterdompropsregisterpropa-propb-propc-"},Object(a.b)("inlineCode",{parentName:"h2"},"filterDOMProps.register(propA, propB, propC ...)")),Object(a.b)("p",null,"Registers additional props to be filtered."),Object(a.b)("p",null,"If you want to filter additional props, then you have to register it."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { filterDOMProps } from 'uniforms';\n\nfilterDOMProps.register(propA, propB, propC /* ... */);\n")),Object(a.b)("h2",{id:"filterdompropsregistered"},Object(a.b)("inlineCode",{parentName:"h2"},"filterDOMProps.registered")),Object(a.b)("p",null,"Returns an array containing already registered props."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { filterDOMProps } from 'uniforms';\n\nfilterDOMProps.register(propA, propB, propC /* ... */);\nfilterDOMProps.registered; // ['propA', 'propB', ...]\n")),Object(a.b)("h2",{id:"injectnamename-component"},Object(a.b)("inlineCode",{parentName:"h2"},"injectName(name, component)")),Object(a.b)("p",null,"Injects name to all already rendered fields. (",Object(a.b)("em",{parentName:"p"},"It's rather an internal helper, but it's still exported."),")"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { injectName } from 'uniforms';\n\nconst componentWithInjectedName = injectName(name, component);\n")),Object(a.b)("h2",{id:"joinnamenull--namea-nameb-namec-"},Object(a.b)("inlineCode",{parentName:"h2"},"joinName([null, ] nameA, nameB, nameC, ...)")),Object(a.b)("p",null,"Safely joins partial field names. When the first param is null, returns a string. Otherwise, returns an array."),Object(a.b)("p",null,"If you create a custom field with subfields, then it's better to use this helper."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { joinName } from 'uniforms';\n\nconst joinedNameString = joinName(nameA, nameB, nameC /* ... */);\nconst joinedNameArray = joinName(null, nameA, nameB, nameC /* ... */);\n")),Object(a.b)("h2",{id:"nothing"},Object(a.b)("inlineCode",{parentName:"h2"},"nothing")),Object(a.b)("p",null,"A safe ",Object(a.b)("inlineCode",{parentName:"p"},"null")," or ",Object(a.b)("inlineCode",{parentName:"p"},"<noscript/>")," tag."),Object(a.b)("p",null,"In React@0.14 you can't return null from functional component, but in React@15 you should use null."),Object(a.b)("p",null,"Basically it's a ",Object(a.b)("inlineCode",{parentName:"p"},"<noscript />")," in @0.14 and null in @15."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { nothing } from 'uniforms';\n\nconst emptyJSX = () => nothing;\n")),Object(a.b)("h2",{id:"randomidsprefix"},Object(a.b)("inlineCode",{parentName:"h2"},"randomIds([prefix])")),Object(a.b)("p",null,"Generates random ID, based on given prefix. (",Object(a.b)("em",{parentName:"p"},"It's rather an internal helper, but it's still exported."),")"),Object(a.b)("p",null,"Use it, if you want to have some random but deterministic strings. If no prefix is provided, the 'uniforms' prefix will be applied."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { randomIds } from 'uniforms';\n\nconst predictableRandomIdGenerator = randomIds(prefix);\n\nconst predictableRandomIdA = predictableRandomIdGenerator();\nconst predictableRandomIdB = predictableRandomIdGenerator();\n")))}p.isMDXComponent=!0},224:function(e,t,n){"use strict";var a=n(3),r=n(69)(!1),i=[].indexOf,b=!!i&&1/[1].indexOf(1,-0)<0;a(a.P+a.F*(b||!n(34)(i)),"Array",{indexOf:function(e){return b?i.apply(this,arguments)||0:r(this,e,arguments[1])}})},232:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a),i=r.a.createContext({}),b=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},c=function(e){var t=b(e.components);return r.a.createElement(i.Provider,{value:t},e.children)};var o="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},l=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,o=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),l=b(n),d=a,m=l[c+"."+d]||l[d]||p[d]||i;return n?r.a.createElement(m,Object.assign({},{ref:t},o,{components:n})):r.a.createElement(m,Object.assign({},{ref:t},o))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,b=new Array(i);b[0]=l;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[o]="string"==typeof e?e:a,b[1]=c;for(var d=2;d<i;d++)b[d]=n[d];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"}}]);