(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{170:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return d}));a(66),a(224),a(33),a(27),a(26),a(67),a(0);var n=a(232);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var b={id:"api-fields",title:"Fields"},l=[{value:"Fields",id:"fields",children:[{value:"AutoField",id:"autofield",children:[]},{value:"AutoFields",id:"autofields",children:[]},{value:"BaseField",id:"basefield",children:[]},{value:"BoolField",id:"boolfield",children:[]},{value:"DateField",id:"datefield",children:[]},{value:"ErrorField",id:"errorfield",children:[]},{value:"ErrorsField",id:"errorsfield",children:[]},{value:"HiddenField",id:"hiddenfield",children:[]},{value:"ListAddField",id:"listaddfield",children:[]},{value:"ListDelField",id:"listdelfield",children:[]},{value:"ListField",id:"listfield",children:[]},{value:"ListItemField",id:"listitemfield",children:[]},{value:"LongTextField",id:"longtextfield",children:[]},{value:"NestField",id:"nestfield",children:[]},{value:"NumField",id:"numfield",children:[]},{value:"RadioField",id:"radiofield",children:[]},{value:"SelectField",id:"selectfield",children:[]},{value:"SubmitField",id:"submitfield",children:[]},{value:"TextField",id:"textfield",children:[]}]},{value:"Props propagation",id:"props-propagation",children:[]}],i={rightToc:l},c="wrapper";function d(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(c,r({},i,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"Uniforms provide a set of predefined components that can be used as form fields."),Object(n.b)("p",null,"The list below contains a guaranteed set of fields, implemented in every theme package:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Component"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"AutoField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Automatically renders a given field.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"AutoFields")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Automatically renders given fields.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"BoolField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Checkbox.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"DateField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"HTML5 ",Object(n.b)("inlineCode",{parentName:"td"},"datetime-local")," input.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"ErrorField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Error message for a given field.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"ErrorsField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Error message with a list of validation errors.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"HiddenField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Hidden field (with a possibility to omit in DOM).")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"ListAddField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"An icon with action to add a list item.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"ListDelField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"An icon with action to remove a list item.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"ListField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"List of nested fields.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"ListItemField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Single list item wrapper.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"LongTextField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Textarea.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"NestField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Block of nested fields.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"NumField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Numeric input.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"RadioField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Radio checkbox.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"SelectField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Select (or set of radio checkboxes).")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"SubmitField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Submit button.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"TextField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Text (or any HTML5 compatible) input.")))),Object(n.b)("h2",{id:"fields"},"Fields"),Object(n.b)("h3",{id:"autofield"},Object(n.b)("inlineCode",{parentName:"h3"},"AutoField")),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"AutoField")," is basically a field renderer - it will render a field of a type adequate to the one defined in the schema,\naccording to the ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/uth-autofield-algorithm"}),Object(n.b)("inlineCode",{parentName:"a"},"AutoField")," algorithm"),".\nYou can also directly pass a component to it (by a ",Object(n.b)("inlineCode",{parentName:"p"},"component")," prop).\nAll additional props will be passed to the result field component."),Object(n.b)("h5",{id:"props"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Default"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"component")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field according to the ",Object(n.b)("inlineCode",{parentName:"td"},"AutoField")," algorithm"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Component to render")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"-"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Name of the field in the schema")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { AutoField } from 'uniforms-unstyled';\n\n<AutoField component={MyComponent} />;\n")),Object(n.b)("h3",{id:"autofields"},Object(n.b)("inlineCode",{parentName:"h3"},"AutoFields")),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"AutoFields")," is basically a set of rendered ",Object(n.b)("inlineCode",{parentName:"p"},"AutoFields"),".\nBy default, the rendered fields will be ",Object(n.b)("inlineCode",{parentName:"p"},"AutoFields")," in a chosen theme.\nHowever, you can replace the standard ",Object(n.b)("inlineCode",{parentName:"p"},"AutoField")," with a custom one through the ",Object(n.b)("inlineCode",{parentName:"p"},"autoField")," property.\nThe ",Object(n.b)("inlineCode",{parentName:"p"},"element")," property defines a wrapping component.\nEg. you want to group your fields inside a section, just do ",Object(n.b)("inlineCode",{parentName:"p"},'element="section"'),". The default one is ",Object(n.b)("inlineCode",{parentName:"p"},"div"),"."),Object(n.b)("h5",{id:"props-1"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Default"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"autoField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Standard ",Object(n.b)("inlineCode",{parentName:"td"},"AutoField")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"AutoField")," Component to render")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"element")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"div")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Fields wrapper")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"fields")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All schema fields"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"List of fields to render")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"omitFields")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"[]")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"List of fields to omit")))),Object(n.b)("h5",{id:"props-usage-1"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { AutoFields } from 'uniforms-unstyled';\n\n<AutoFields\n  autoField={MyAutoField}\n  element=\"section\"\n  fields={['fieldA', 'fieldB']}\n  omitFields={['fieldA', 'fieldB']}\n/>;\n")),Object(n.b)("h3",{id:"basefield"},Object(n.b)("inlineCode",{parentName:"h3"},"BaseField")),Object(n.b)("p",null,"You can't really render a BaseField because it doesn't have a render method.\nIt's a base class of all packaged fields, so that all props below are available\nto All fields."),Object(n.b)("p",null,"You can pass any prop but remember that passing ",Object(n.b)("inlineCode",{parentName:"p"},"onChange"),' will "detach"\nthe field from the form in some way - it won\'t change your form state.\nAlso, passing any already provided prop - like ',Object(n.b)("inlineCode",{parentName:"p"},"id")," - will override the\ndefault one."),Object(n.b)("h5",{id:"props-2"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Default"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"disabled")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"false")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field disabled state. It's passed directly to the field, but it propagates same as the label.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"label")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"true")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field label. This prop has three modes. If you pass a string, then it will be used as a label. If you pass a null, then it won't have a label, but nested fields will have default labels. If you pass a non-null falsy value, it won't have a label and nested fields won't have labels too.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"-"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field name. Used for identification. It should match your schema - if not, it will throw an error.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"placeholder")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"false")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field placeholder. If set to true, then a label will be used. Otherwise, it's handled like a label (including propagation).")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"value")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"-"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field value. Every field accepts its specific value type only.")))),Object(n.b)("h5",{id:"props-usage-2"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { BaseField } from 'uniforms';\n\n<BaseField\n  disabled={false}\n  label\n  name=\"field\"\n  placeholder={false}\n  value={value}\n/>;\n")),Object(n.b)("h3",{id:"boolfield"},Object(n.b)("inlineCode",{parentName:"h3"},"BoolField")),Object(n.b)("p",null,"A checkbox."),Object(n.b)("h5",{id:"props-3"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"le in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"appearance")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),'Field appearance. Set to "toggle" to appear as a Material Toggle or to "checkbox" (or leave it undefined) to use a Checkbox appearance.'),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"material")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"extra")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"feedbackable")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field feedback state. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"grid")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"help")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help text. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"helpClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help block className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inline")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputRef")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelBefore")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label className. A custom className for the field's label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout of label. You can set span and/or offset."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field and sourroundings wrap className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapperCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout for input controls. Same as labelCol."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-3"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { BoolField } from 'uniforms-unstyled';\n\n<BoolField\n  appearance=\"checkbox\" // Renders a material-ui Checkbox\n  appearance=\"toggle\" // Renders a material-ui Toggle\n  extra=\"Extra Feedback or Help\"\n  feedbackable\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  inline\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelBefore=\"Label\"\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),Object(n.b)("h3",{id:"datefield"},Object(n.b)("inlineCode",{parentName:"h3"},"DateField")),Object(n.b)("h5",{id:"props-4"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"extra")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"feedbackable")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field feedback state. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"grid")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"help")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help text. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd,bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"helpClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help block className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"icon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconProps")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputRef")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label className. A custom className for the field's label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout of label. You can set span and/or offset."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelProps")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Props for the InputLabel"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"material")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"max")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Maximum value. Date object."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"min")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Minimal value. Date object."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"timeFormat")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Display time picker in ampm (12hr) format or 24hr format."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"material")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field and sourroundings wrap className. In SemanticUI theme, this class name is used on ui input wrapper, so you can pass classes like small, huge, inverted, transparent etc."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapperCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout for input controls. Same as labelCol."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-4"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { DateField } from 'uniforms-unstyled';\n\n<DateField\n  extra=\"Extra Feedback or Help\"\n  feedbackable\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelProps={{shrink: true, disableAnimation: true}}\n  max={new Date(2100, 1, 1)}\n  min={new Date(2000, 1, 1)}\n  showInlineError\n  timeFormat=\"ampm\"\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),Object(n.b)("h3",{id:"errorfield"},Object(n.b)("inlineCode",{parentName:"h3"},"ErrorField")),Object(n.b)("p",null,"Error message renderer."),Object(n.b)("h5",{id:"props-5"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"children")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Custom content. By default, it will render a block with the error message (if any), but you can customize the content.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Target field. This field error should be used.")))),Object(n.b)("h5",{id:"props-usage-5"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { ErrorField } from 'uniforms-unstyled';\n\n<ErrorField children={children} name=\"field\" />;\n")),Object(n.b)("h3",{id:"errorsfield"},Object(n.b)("inlineCode",{parentName:"h3"},"ErrorsField")),Object(n.b)("p",null,"Error messages renderer."),Object(n.b)("h5",{id:"props-6"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"children")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Custom content. By default, it will render a block with the error messages (if any), but you can customize the content.")))),Object(n.b)("h5",{id:"props-usage-6"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { ErrorsField } from 'uniforms-unstyled';\n\n<ErrorsField children={children} />;\n")),Object(n.b)("h3",{id:"hiddenfield"},Object(n.b)("inlineCode",{parentName:"h3"},"HiddenField")),Object(n.b)("h5",{id:"props-7"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field name. Used for identification. It should match your schema - if not, it will throw an error.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"value")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field value. This field has completely different semantics. When a value is set, then it's updating a current model instead of being passed to the field.")))),Object(n.b)("h5",{id:"props-usage-7"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { HiddenField } from 'uniforms-unstyled';\n\n<HiddenField name=\"field\" value={value} />;\n")),Object(n.b)("h3",{id:"listaddfield"},Object(n.b)("inlineCode",{parentName:"h3"},"ListAddField")),Object(n.b)("h5",{id:"props-8"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"addIcon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Icon. By default, glyphicon is used."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted.",Object(n.b)("br",null),"\n",Object(n.b)("strong",{parentName:"p"},"Note:")," This is one of ",Object(n.b)("em",{parentName:"p"},"internal")," components of ",Object(n.b)("inlineCode",{parentName:"p"},"ListField"),"."),Object(n.b)("h5",{id:"props-usage-8"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { ListAddField } from 'uniforms-unstyled';\n\n<ListAddField addIcon={<MyAddIcon />} />;\n")),Object(n.b)("h3",{id:"listdelfield"},Object(n.b)("inlineCode",{parentName:"h3"},"ListDelField")),Object(n.b)("h5",{id:"props-9"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"removeIcon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Icon. By default, glyphicon is used."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted.",Object(n.b)("br",null),"\n",Object(n.b)("strong",{parentName:"p"},"Note:")," This is one of ",Object(n.b)("em",{parentName:"p"},"internal")," components of ",Object(n.b)("inlineCode",{parentName:"p"},"ListField"),"."),Object(n.b)("h5",{id:"props-usage-9"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { ListDelField } from 'uniforms-unstyled';\n\n<ListDelField removeIcon={<MyRemoveIcon />} />;\n")),Object(n.b)("h3",{id:"listfield"},Object(n.b)("inlineCode",{parentName:"h3"},"ListField")),Object(n.b)("h5",{id:"props-10"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Default"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"addIcon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"glyphicon"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Icon. It's passed to the ListAddField."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"initialCount")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"-"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Initial items count. At least this amount of fields will be rendered at the beginning."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"itemProps")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"-"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"ListItemField props. These props are passed to the ListItemField."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"removeIcon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"glyphicon"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Icon. It's passed to the ListDelField."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"})),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4, semantic")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-10"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { ListField } from 'uniforms-unstyled';\n\n<ListField\n  addIcon={<MyAddIcon />}\n  initialCount={5}\n  itemProps={\n    {\n      /* ... */\n    }\n  }\n  removeIcon={<MyRemoveIcon />}\n  showInlineError\n/>;\n")),Object(n.b)("h3",{id:"listitemfield"},Object(n.b)("inlineCode",{parentName:"h3"},"ListItemField")),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Default"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"removeIcon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"glyphicon"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Icon. It's passed to the ListDelField."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted.",Object(n.b)("br",null),"\n",Object(n.b)("strong",{parentName:"p"},"Note:")," This is one of ",Object(n.b)("em",{parentName:"p"},"internal")," components of ",Object(n.b)("inlineCode",{parentName:"p"},"ListField"),"."),Object(n.b)("h5",{id:"props-usage-11"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { ListItemField } from 'uniforms-unstyled';\n\n<ListItemField removeIcon={<MyRemoveIcon />} />;\n")),Object(n.b)("h3",{id:"longtextfield"},Object(n.b)("inlineCode",{parentName:"h3"},"LongTextField")),Object(n.b)("p",null,"A textarea."),Object(n.b)("h5",{id:"props-11"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"extra")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"grid")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"help")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help text. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"helpClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help block className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"icon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconProps")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inline")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputRef")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelBefore")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label className. A custom className for the field's label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout of label. You can set span and/or offset."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapperCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout for input controls. Same as labelCol."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field and sourroundings wrap className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-12"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { LongTextField } from 'uniforms-unstyled';\n\n<LongTextField\n  extra=\"Extra Feedback or Help\"\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),Object(n.b)("h3",{id:"nestfield"},Object(n.b)("inlineCode",{parentName:"h3"},"NestField")),Object(n.b)("h5",{id:"props-12"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"fields")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Array of rendered fields. If no custom content provided, only those fields are rendered. By default, All of nested fields are rendered."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"grouped")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),'Add / remove "grouped" class from the field. In Semantic, fields can be grouped using this class. By default, this class is added to the NestField.'),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-13"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { NestField } from 'uniforms-unstyled';\n\n<NestField fields={['fieldA', 'fieldB' /* ... */]} grouped showInlineError />;\n")),Object(n.b)("h3",{id:"numfield"},Object(n.b)("inlineCode",{parentName:"h3"},"NumField")),Object(n.b)("p",null,"A numeric input field."),Object(n.b)("h5",{id:"props-13"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"decimal")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Decimal mode. This will change value step from 1 to 0.01."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"extra")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"grid")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"help")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help text. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"helpClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help block className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"icon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconProps")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inline")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputRef")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelBefore")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label className. A custom className for the field's label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout of label. You can set span and/or offset."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"max")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Maximum value. Date object."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"min")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Minimal value. Date object."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"step")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input step."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapperCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout for input controls. Same as labelCol."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field and sourroundings wrap className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-14"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { NumField } from 'uniforms-unstyled';\n\n<NumField\n  decimal\n  extra=\"Extra Feedback or Help\"\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  max={100}\n  min={10}\n  showInlineError\n  step={5}\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),Object(n.b)("h3",{id:"radiofield"},Object(n.b)("inlineCode",{parentName:"h3"},"RadioField")),Object(n.b)("h5",{id:"props-14"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"allowedValues")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Array of allowed values. By default, those are extracted from your schema."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inline")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label className. A custom className for the field's label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout of label. You can set span and/or offset."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"transform")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label transform. Allows to transform the each value into a human-readable label"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapperCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout for input controls. Same as labelCol."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-15"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { RadioField } from 'uniforms-unstyled';\n\n<RadioField\n  allowedValues={[value1, value2 /* ... */]}\n  inline\n  inputClassName=\"a b c\"\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  transform={value => label}\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),Object(n.b)("h3",{id:"selectfield"},Object(n.b)("inlineCode",{parentName:"h3"},"SelectField")),Object(n.b)("h5",{id:"props-15"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"allowedValues")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Array of allowed values. By default, those are extracted from your schema."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"checkboxes")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Turn on checkbox/radio mode. It's always true in mutltiple (i.e. fieldType === Array) mode."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"extra")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"help")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help text. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"helpClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help block className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inline")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputRef")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label className. A custom className for the field's label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout of label. You can set span and/or offset."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelProps")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Props for the InputLabel"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"material")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"options")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Options. It is optional and using ",Object(n.b)("inlineCode",{parentName:"td"},"options")," will override ",Object(n.b)("inlineCode",{parentName:"td"},"transform")," and ",Object(n.b)("inlineCode",{parentName:"td"},"allowedValues"),". It can be either an object or an array (or a function, that returns it)."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"transform")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label transform. Allows to transform the each value into a human-readable label"),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapperCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout for input controls. Same as labelCol."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field and sourroundings wrap className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-16"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { SelectField } from 'uniforms-unstyled';\n\n<SelectField\n  allowedValues={[value1, value2 /* ... */]}\n  checkboxes\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  inline\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelProps={{shrink: true, disableAnimation: true}}\n  options={[{label: 'Hi', value: value1}, {label: 'Hello', value: value1} /* ... */]}\n  showInlineError\n  transform={value => label} //   Set of values that will be shown in the select.\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),Object(n.b)("h3",{id:"submitfield"},Object(n.b)("inlineCode",{parentName:"h3"},"SubmitField")),Object(n.b)("h5",{id:"props-16"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputRef")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")))),Object(n.b)("h5",{id:"props-usage-17"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { SubmitField } from 'uniforms-unstyled';\n\n<SubmitField inputClassName=\"a b c\" inputRef={ref => {}} />;\n")),Object(n.b)("h3",{id:"textfield"},Object(n.b)("inlineCode",{parentName:"h3"},"TextField")),Object(n.b)("h5",{id:"props-17"},"Props:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Description"),Object(n.b)("th",r({parentName:"tr"},{align:"center"}),"Available in"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"extra")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"grid")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"help")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help text. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"helpClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Help block className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"icon")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconLeft")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"iconProps")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"inputRef")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Label className. A custom className for the field's label."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"labelCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout of label. You can set span and/or offset."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field inline error. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd, bootstrap3, bootstrap4, semantic")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"type")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Input type. HTML compatible input type like password. Default is text."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"All")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapperCol")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field layout. The layout for input controls. Same as labelCol."),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"antd")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:"center"}),Object(n.b)("inlineCode",{parentName:"td"},"wrapClassName")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"Field and sourroundings wrap className. ",Object(n.b)("em",{parentName:"td"},"Some description would be great, huh?")),Object(n.b)("td",r({parentName:"tr"},{align:"center"}),"bootstrap3, bootstrap4")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," All ",Object(n.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(n.b)("h5",{id:"props-usage-18"},"Props usage:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { TextField } from 'uniforms-unstyled';\n\n<TextField\n  extra=\"Extra Feedback or Help\"\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  type=\"password\"   // Input type. HTML compatible input type like password. Default is text.\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),Object(n.b)("h2",{id:"props-propagation"},"Props propagation"),Object(n.b)("p",null,"Few props propagate in a very special way. These are ",Object(n.b)("inlineCode",{parentName:"p"},"label"),", ",Object(n.b)("inlineCode",{parentName:"p"},"placeholder")," and ",Object(n.b)("inlineCode",{parentName:"p"},"disabled"),"."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Example:")),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),'<TextField />                    // default label | no      placeholder\n<TextField label="Text" />       // custom  label | no      placeholder\n<TextField label={false} />      // no      label | no      placeholder\n<TextField placeholder />        // default label | default placeholder\n<TextField placeholder="Text" /> // default label | custom  placeholder\n\n<NestField label={null}> // null = no label but the children have their labels\n    <TextField />\n</NestField>\n\n<NestField label={false}> // false = no label and the children have no labels\n    <TextField />\n</NestField>\n\n<ListField name="authors" disabled>          // Additions are disabled...\n    <ListItemField name="$" disabled>        // ...deletion too\n        <NestField disabled={false} name=""> // ...but editing is not.\n            <TextField name="name" />\n            <NumField  name="age" />\n        </NestField>\n    </ListItemField>\n</ListField>\n')),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note:")," ",Object(n.b)("inlineCode",{parentName:"p"},"label"),", ",Object(n.b)("inlineCode",{parentName:"p"},"placeholder")," and ",Object(n.b)("inlineCode",{parentName:"p"},"disabled")," are cast to ",Object(n.b)("inlineCode",{parentName:"p"},"Boolean")," before being passed to nested fields."))}d.isMDXComponent=!0},224:function(e,t,a){"use strict";var n=a(3),r=a(69)(!1),b=[].indexOf,l=!!b&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(l||!a(34)(b)),"Array",{indexOf:function(e){return l?b.apply(this,arguments)||0:r(this,e,arguments[1])}})},232:function(e,t,a){"use strict";a.d(t,"a",(function(){return i})),a.d(t,"b",(function(){return p}));var n=a(0),r=a.n(n),b=r.a.createContext({}),l=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):Object.assign({},t,e)),a},i=function(e){var t=l(e.components);return r.a.createElement(b.Provider,{value:t},e.children)};var c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},o=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,i=e.parentName,c=function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}(e,["components","mdxType","originalType","parentName"]),o=l(a),p=n,m=o[i+"."+p]||o[p]||d[p]||b;return a?r.a.createElement(m,Object.assign({},{ref:t},c,{components:a})):r.a.createElement(m,Object.assign({},{ref:t},c))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,l=new Array(b);l[0]=o;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<b;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}o.displayName="MDXCreateElement"}}]);